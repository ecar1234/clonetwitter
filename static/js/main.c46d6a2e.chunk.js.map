{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweets.js","components/TweetFactory.js","routes/Home.js","components/Nav.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storeService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweets","userObj","tweetObj","isOwner","editing","setEditing","text","editTweet","setEditTweet","onEdit","onUpdate","doc","id","update","onDelete","window","confirm","delete","refFromURL","attachmentUrl","displayName","src","alt","createdAt","curId","faPencilAlt","faTrash","TweetFactory","newTweet","setNewTweet","attachment","setAttachment","setCurId","day","Date","toISOString","substr","h","getHours","m","getMinutes","s","getSeconds","attachmentRef","ref","child","uid","uuidV4","putString","response","getDownloadURL","tweet","userId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","match","readAsDataURL","onloadend","currentTarget","result","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snaps","tweetArr","docs","map","data","Nav","display","justifyContent","marginTop","to","marginRight","flexDirection","alignItems","fontSize","marginLeft","faUser","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","currentUser","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c46d6a2e.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\n  firebase.initializeApp(firebaseConfig);\n\n  export const firebaseInstance = firebase;\n  export const authService = firebase.auth(); \n  export const dbService = firebase.firestore();\n  export const storeService = firebase.storage();","import React, { useState } from 'react';\nimport { authService } from 'fbase';\nimport 'components/AuthForm.css'\n\nconst AuthForm = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"error\");\n\n    const onChange = (e) => {\n        const {\n            target: {name, value}\n        } = e;\n        if(name === \"email\"){\n            setEmail(value);\n        }\n        else if(name === \"password\"){\n            setPassword(value)\n        }\n    }\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try{\n            if(newAccount){\n               await authService.createUserWithEmailAndPassword(email, password);\n            }\n            else{\n                await authService.signInWithEmailAndPassword(email, password);\n            }\n        }\n        \n        catch(error){\n            setError(error.message)\n        }\n    }\n\n    const toggleAccount = () => setNewAccount((prev) => !prev)\n\n    return (\n        <>\n            <form className=\"authForm_container\" onSubmit={onSubmit}>\n                <input \n                    className=\"auth_input\"\n                    name=\"email\" \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    required value={email} \n                    onChange={onChange} />\n                <input \n                    className=\"auth_input\"\n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"password\" \n                    required value={password} \n                    onChange={onChange}/>\n               <input className=\"auth_submit\" \n                    type=\"submit\" \n                    value={newAccount ? \"Create Account\" : \"Log In\"} \n               />\n               <div \n                    className={error !==\"error\" ? \"auth_error\" : \"auth_noneError\"} \n               >\n               {error}\n               </div> \n           </form>\n            <span className=\"auth_switch\" onClick={toggleAccount}>\n                {newAccount ? \"Log In\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\n\nexport default AuthForm;","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from 'fbase';\nimport AuthForm from 'components/AuthForm'\nimport 'routes/Auth.css'\n\nconst Auth = () => {\n    const onSocialClick = async (e) => {\n        let provider;\n        const {\n            target: { name }\n        } = e;\n        if(name === \"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        }\n        else if(name === \"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n    }\n    return (\n        <div className=\"auth_container\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"4x\"\n                style={{ marginBottom: 30 }}\n            />\n           <AuthForm />\n            <div className=\"auth_buttons\">\n                <button \n                    className=\"auth_button\" \n                    onClick={onSocialClick} \n                    name=\"google\">\n                    Continue with Google\n                    <FontAwesomeIcon icon={faGoogle} />\n                 </button>\n                <button \n                    className=\"auth_button\" \n                    onClick={onSocialClick} \n                    name=\"github\">\n                    Continue with Github\n                    <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n           \n        </div>\n    );\n};\n\nexport default Auth;","import { dbService, storeService } from 'fbase';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport 'components/Tweets.css'\n\n\n\nconst Tweets = ({ userObj, tweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [editTweet, setEditTweet] =useState(tweetObj.text);\n\n    const onEdit = () => {\n        setEditing(prev => !prev);\n    };\n    const onUpdate = async (e) => {\n        e.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text: editTweet\n        });\n        setEditing(false);\n    };\n    const onDelete = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n        if(ok){\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            await storeService.refFromURL(tweetObj.attachmentUrl).delete(); // refURL 에서 ref로 수정.. 이유 모름..\n        }\n    };\n    const onChange = (e) => {\n        setEditTweet(e.target.value); \n    };\n\n    \n    return (\n       <div  className=\"tweet_container\">\n           { editing ? (\n               <form  className=\"tweet_editForm\">\n                    <p>{userObj.displayName}</p>\n                   <input \n                    onChange={onChange} \n                    type=\"text\" \n                    value={editTweet} \n                    required \n                   />\n                   <input \n                    className=\"tweet_formBtn\"\n                    onClick={onUpdate} \n                    type=\"submit\" \n                    value=\"Update\" \n                   />\n                   <span onClick={onEdit} className=\"formBtn cancelBtn\">\n                        Cancel\n                   </span>\n                   {tweetObj.attachmentUrl && \n                   <img src={tweetObj.attachmentUrl} alt=\"\" />}\n                    <p>{tweetObj.createdAt}</p>\n               </form>\n           ) : (\n            <>\n                {tweetObj.curId ? \n                    <p className=\"tweet_user\">{tweetObj.curId}</p> :\n                    \"Guest\"\n                 }\n                <p className=\"tweet_text\">{tweetObj.text}</p>\n                {tweetObj.attachmentUrl && \n                <img src={tweetObj.attachmentUrl} alt=\"\" />}\n                <p className=\"tweet_time\">{tweetObj.createdAt}</p>\n\n                <div className={isOwner ? \"tweet_action\" : \"tweet_action_none\"}>\n                    <span onClick={onEdit}>\n                        <FontAwesomeIcon icon={faPencilAlt} />\n                    </span>\n                    <span onClick={onDelete}>\n                        <FontAwesomeIcon icon={faTrash} />\n                    </span>\n                </div>\n                \n            </>\n           )}\n       </div>\n    );\n};\n\nexport default Tweets;","import React, { useState } from 'react';\nimport { storeService, dbService } from 'fbase'\nimport { v4 as uuidV4 } from 'uuid'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport 'components/TweetFactory.css'\n\nconst TweetFactory = ({ userObj }) => {\n\n    const [newTweet, setNewTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n    const [curId, setCurId] = useState(\"\")\n\n    const onSubmit = async(e) => {\n        if(newTweet === \"\") {\n            return;\n        }\n        e.preventDefault();\n        let attachmentUrl = \"\";\n        setCurId(userObj.displayName);\n        let day = (new Date()).toISOString().substr(0, 10);\n        let h = (new Date()).getHours();\n        let m = (new Date()).getMinutes();\n        let s = (new Date()).getSeconds();\n        \n        if(attachment !== \"\"){\n            const attachmentRef = storeService.ref().child(`${userObj.uid}/${uuidV4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n       \n        const tweet = {\n            text: newTweet,\n            createdAt: `${day} ${h}:${m}:${s}`,\n            userId: userObj.uid,\n            curId: curId || \"Guest\" ,\n            attachmentUrl\n        };\n        await dbService.collection(\"tweets\").add(tweet);\n        setNewTweet(\"\");\n        setAttachment(\"\")\n    }; \n\n    const onChange = (e) => {\n       const { \n            target:{value}\n       } = e;\n       setNewTweet(value);\n    };\n\n    const onFileChange = (e) => {\n        const theFile = e.target.files[0];\n        const reader = new FileReader();\n        if(theFile && theFile.type.match(\"image.*\")){\n            reader.readAsDataURL(theFile);\n        }\n        reader.onloadend = (e) => {\n            setAttachment(e.currentTarget.result);\n        }\n        \n    }\n    const clearImg = () => setAttachment(\"\");\n\n    return (\n        <div className=\"main_container\">\n            <form className=\"factory_form\" onSubmit={onSubmit}>\n               <div className=\"factory_input_container\">\n                <input \n                    className=\"factory_input\"\n                    value={newTweet} \n                    onChange={onChange} \n                    type=\"text\" \n                    placeholder=\"What's on your mind?\" \n                    maxLength={120} />\n                <input \n                    className=\"factory_submit\"\n                    type=\"submit\" \n                    value=\"Go Tweet\" />\n               </div>\n            </form>\n            <label className=\"factoryInput_label\" htmlFor=\"attach_file\" >\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input\t      \n                className=\"factoryForm_file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                    opacity: 0,\n                }}\n            />\t      \n            {attachment && (\n                <div className=\"factoryForm_attachment\" >\n                    <img src={attachment} alt=\"\" \n                    style={{\n                    backgroundImage: attachment,\n                    }} />\n                    <div className=\"factoryForm_clear\" onClick={clearImg}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            )}\n        </div>\n        \n    );\n};\n\nexport default TweetFactory;","import React, { useEffect, useState } from 'react';\nimport { dbService } from 'fbase';\nimport Tweets from 'components/Tweets';\nimport TweetFactory from 'components/TweetFactory';\nimport 'routes/Home.css'\n\n\nconst Home = ({ userObj }) => {\n\n    const [tweets, setTweets] = useState([]);\n    \n\n    // 데이터를 받아오는 방법(1) : get으로 받아온 데이터를 forEach 로 분할\n    // const getTweets = async() => {\n    //     const dbTweets = await dbService.collection(\"tweets\").get();\n        \n    //     dbTweets.forEach(document => {\n    //         const tweetsObj = {\n    //             ...document.data(),\n    //             id: document.id,\n    //         };\n    //         setTweets(prev => [tweetsObj, ...prev]);\n    //     })\n    // }\n    useEffect(() => {\n        // getTweets();\n\n        dbService.collection(\"tweets\").onSnapshot(snaps => { //(2) snapshot 을 통해서 실기간 반영 하는 방법\n            const tweetArr = snaps.docs.map(doc => ({\n                id: doc.id,\n                ...doc.data()\n            }));\n            setTweets(tweetArr);\n        });\n\n    },[]);\n\n    \n\n    return (\n       <div className=\"home_container\">\n            <TweetFactory userObj={userObj} />\n            <div>\n                {tweets.map(tweet => (\n                    <Tweets \n                    key={tweet.id} \n                    userObj={userObj}\n                    tweetObj={tweet} \n                    isOwner={tweet.userId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst Nav = ({ userObj }) => {\n    return (\n        <nav>\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n                <li>\n                    <Link to=\"/\" style={{ \n                        marginRight: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12,\n                    }}>\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                        <span style={{marginTop:10}}>\n                            HOME\n                        </span>\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                        to=\"/profile\"\n                        style={{\n                            marginLeft: 10,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            fontSize: 12,\n                        }}\n                        >\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                        <span style={{ marginTop: 10 }}>\n                            {userObj.displayName}'s Profile\n                        </span>\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Nav;","import { authService } from 'fbase';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport 'routes/Profile.css'\n\nconst Profile = ({ refreshUser, userObj }) => {\n\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const history = useHistory();\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/clonetwitter\");\n    };\n\n    const onChange = (e) => {\n        setNewDisplayName(e.target.value);\n    };\n\n    const onSubmit = async(e) => {\n        e.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n           await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            refreshUser();\n        }\n    }; \n\n    return (\n       <div className=\"profile_container\">\n            <form className=\"profile_form\" onSubmit={onSubmit}>\n                <input\n                    className=\"profile_input\" \n                    onChange={onChange} \n                    type=\"text\" \n                    placeholder=\"User Name\" \n                    value={newDisplayName}\n                    size=\"20\"\n                    maxLength={16}\n                />\n                <input \n                    className=\"profile_submit\"\n                    type=\"submit\" \n                    value=\"Update\" \n                />\n            </form>\n            <div className=\"profile_logout\">\n                <button className=\"logout\" onClick={onLogOutClick}>Log out</button>\n            </div>\n       </div>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Auth from 'routes/Auth'\nimport Home from 'routes/Home'\nimport Nav from 'components/Nav'\nimport Profile from 'routes/Profile';\n\n\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n   \n    return (\n        <>\n        {isLoggedIn && <Nav userObj={userObj} />}\n        <Switch>\n            {isLoggedIn ? \n            <>\n                <Route exact path=\"/clonetwitter\">\n                    <Home userObj={userObj} />\n                </Route>\n                <Route path=\"/profile\">\n                    <Profile refreshUser={refreshUser} userObj={userObj} />\n                </Route>\n            </> : \n            <>\n                <Route exact path=\"/clonetwitter\">\n                    <Auth />\n                </Route>\n            </> }\n        </Switch>\n        </>\n    )\n};\n\nexport default AppRouter;","import React, { useEffect, useState } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'fbase'\nimport 'components/App.css'\n\nfunction App() {\n  \n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName || \"Guest\",\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      }\n      else{\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    })\n  },[])\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  };\n\n  return (\n    <>\n   { init ? \n   <AppRouter \n   refreshUser={refreshUser} \n   isLoggedIn={isLoggedIn} \n   userObj={userObj} \n   /> : (\n     \"initializing...\"\n     )}\n   </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './components/App';\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}